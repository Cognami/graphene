/**
 * With credits to Oculus Info Inc for the influence of this document. 
 * Released under the MIT License.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@namespace("graphene.model.idl")

/**
*/
protocol G_NodeTypeAccess {
	
	import idl "CommonDataTypes_v4.1.avdl";
	
	/**
	* Nodes
	*/
	array<G_IdType> getNodeTypes();
	
	G_IdType getNodeType(string id);
	/*
	* Get the G_NodeType using an enum's name.
	*/
	G_IdType getCommonNodeType(G_CanonicalPropertyType type);
	
	G_CanonicalPropertyType getCommonTypeFromString(string t);
	
	G_CanonicalPropertyType getCommonTypeFromType(G_IdType t);
	
	boolean equalsCanonical(G_IdType t, G_CanonicalPropertyType canonical);
	
	boolean equalsString(G_IdType t, string name);
}
