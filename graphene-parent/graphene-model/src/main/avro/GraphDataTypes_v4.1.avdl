/**
 * With credits to Oculus Info Inc for the influence of this document. Released
 * under the MIT License.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@namespace("graphene.model.idl")

protocol G_GraphDataTypes {
	import idl "DataTypes_v1.8.avdl";
	import idl "CommonDataTypes_v4.1.avdl";
	
	record G_Node {
		union {array<map<string>>,null} dataSet;
	
		boolean edited = false;
		string id;
		union {string,null} idType;
		union {string,null} idVal;
		union {string,null} label;
		
		union {string,null} color;
		int degree = 0;
		boolean isCluster = false;
		boolean isUsed = false;
		double minScore = 0.0d;
		int nbrLinks = 0;
		double priority = 0.0d;
		boolean scanned = false; // true when we have searched on this value
		int size = 16;
		boolean traversed = false;

		/** default, until children added */
		boolean isLeaf = true;
	
		/** true if it's the one searched for */
		boolean isOrigin = false;
	
		/** Used to be called family. */
		union {string,null} nodeType;
		union {array<G_Entity>,null} nodes;
		
		union {array<G_Link>,null} edges;
	
		union {array<G_Property>,null} properties;
	}
	
	record G_Edge {
		union {array<map<string>>,null} dataSet;
		union {string,null} color = "#23A4FF";
		int count = 1;
		int day = -1;
		int degree = 0;
		boolean directed = false;
		union {array<G_Edge>,null} edges;
		boolean edited = false;
		boolean expanded = false;
		union {string,null} idType;
		union {string,null} idVal;
		union {string,null} label;
		union {string,null} lineStyle = "solid";
		int month = -1;
		union {string,null} sourceId = "src";
		union {string,null} targetId = "target";
		double value = 0; // to be a serialized amount to hold aggregated
		int weight = 1; // Consider allowing double or Number
		int year = -1;
	}
	
	
	/**
	 * a Graph object
	 */
	record G_Graph {
		/**
		 * The id of the graph
		 */
		string id;
		/**
		 * Usually 0 for success, 1 otherwise
		 */
		int intStatus = 0;
		int numEdges;
		int numNodes;
		union {string,null} strStatus = "OK";
		union {string,null} userId = "None";
		union {string,null} username = "None";
		union {array<G_Entity>,null} nodes;
		union {array<G_Link>,null} edges;
		union {array<G_Property>,null} properties;
		union {array<G_LegendItem>,null} legend;
		union {array<G_DocumentError>,null} errors;
	}
	

	
}
