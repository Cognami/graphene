/**
 * Copyright (c) 2013 Oculus Info Inc. 
 * http://www.oculusinfo.com/
 * 
 * Released under the MIT License.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@namespace("graphene.model.idl")

/**
*/
protocol G_DataAccess {
	import idl "DataTypes_v1.8.avdl";
	import idl "EntitySearch_v1.8.avdl";
	/**
	 Sort type for transactions
	 */
	enum G_SortBy {
		DATE,
		AMOUNT
	}

	/**
	 Direction of desired links
	 */
	enum G_DirectionFilter {
		SOURCE,
		DESTINATION,
		BOTH
	}
	
	/**
	 Type of entity associated with desired links
	 
	 ADDED IN 1.6
	 
	 */
	enum G_LinkEntityTypeFilter {
		ACCOUNT_OWNER,
		ACCOUNT,
		CLUSTER_SUMMARY,
		ANY
	}

	/**
	 Amount of detail requested
	 
	 ADDED IN 1.6
	 
	 */
	enum G_LevelOfDetail {
		SUMMARY,
		FULL
	}
	

		
	/**
	 The set of transactions from a single call to getAllTransactions.
		  
	 ADDED IN 1.6
	 */
	record G_TransactionResults {
		/** total number of results FOUND, which may be more than the number returned. */
		long total = 0;
		
		/** an array of transactions */
		array<G_Link> results;
	}

	/**
	 Returns a set of entities by uid. Typically requested with a summary level of detail,
	 appropriate for card display and clustering. Full details are requested for 
	 detailed display views.
	 
	 Service URL: /entity/list
	 HTTP Method: POST and GET
	 
	 @param entities 	uids of entities to retrieve
	 @return 			entities	
	 */
	array<G_Entity> getEntities(array<string> entities, G_LevelOfDetail levelOfDetail);
	
	/**
	 Returns a set of accounts for each given entity. Typically requested with a summary level of detail,
	 appropriate for card display and cluster summarisation. Full details are requested for 
	 detailed display views.
	 
	 Service URL: /entity/accounts
	 HTTP Method: POST and GET
	 
	 @param entities 		uids of entities to retrieve
	 @return 				map of input entity IDs to an array of the accounts for that entity	
	 */
	map<array<G_Entity>> getAccounts(array<string> entities);
		
	/**
	 Returns links to other entities related to specify entities. Each Link returned should
	 represent multiple records, used for displaying flow.
	 
	 CHANGED IN 1.6
	   - Added entityType filter
	 
	 See the specification for the Flow Data View.
	 See the specification for the Time Series Data View.
	 
	 Service URL: /link/flow
	 HTTP Method: POST and GET
	 
	 @param entities 		uids of entities to retrieve links for
	 @param focusEntities 	uids of focus entities (may be null)
	 @param direction 		one of: SOURCE, DESTINATION, BOTH
	 @param entityType		one of: ACCOUNT_OWNER, ACCOUNT, CLUSTER_SUMMARY, ANY
	 @param tag 			one of: FINANCIAL, SOCIAL, COMMUNICATION
	 @param date 			in the given date range
	 @return 				map of input entity IDs to an array of the links for that entity	
	 */
	map<array<G_Link>> getFlowAggregation(
		array<string> entities,
		union {array<string>, null} focusEntities,
		G_DirectionFilter direction,
		G_LinkEntityTypeFilter entityType,
		union {G_LinkTag, null} tag,
		union {G_DateRange, null} date);
	
	/**
	 Returns links to other entities related to specify entities.  Each Link returned should
	 represent multiple records, used for displaying time series.
	 
	 See the specification for the Time Series Data View.
	 
	 Service URL: /link/series
	 HTTP Method: POST and GET
	 
	 @param entities 		uids of entities to retrieve links for
	 @param focusEntities 	uids of focus entities (may be null)
	 @param tag 			one of: FINANCIAL, SOCIAL, COMMUNICATION
	 @param date 			in the given date range
	 @return 				map of input entity IDs to an array of the links for that entity	
	 */
	map<array<G_Link>> getTimeSeriesAggregation(
		array<string> entities,
		union {array<string>, null} focusEntities,
		union {G_LinkTag, null} tag,
		G_DateRange date);
	
	/**
	 Returns links to other entities related to specify entities. Each link returned should
	 represent one raw transaction.  For financial data, these transactions will form a ledger.
	 For communications or social data, these are un-aggregated links for drill down by the user.
	 
	 CHANGED IN 1.6
	 	- return value type changed
	 	- added start index
	 
	 Service URL: /link/transactions
	 HTTP Method: POST and GET
	 
	 @param entities 		uids of entities to retrieve links for
	 @param direction 		one of: SOURCE, DESTINATION, BOTH
	 @param tag 			one of: FINANCIAL, SOCIAL, COMMUNICATION
	 @param date 			in the given date range
	 @param sort			Sort order for transactions
	 @param linkFilter		If provided, only return transactions where the "other side" is in this list
	 @param start			0-based index of first result to return
	 @param max				Trim the number of results this this value.
	 @return 				transactions for the set of entities	
	 
	G_TransactionResults getAllTransactions(
			array<string> entities,
			union {G_LinkTag, null} tag,
			union {G_DateRange, null} date,
			union {G_SortBy, null} sort,
			union {array<string>, null} linkFilter, // ADDED IN 1.4
			long start = 0, 
			long max = -1
	);	 */
	G_TransactionResults getAllTransactions(
			G_EntityQuery q
	);
	
	string saveObject(@java-class("java.lang.Object") string g, string id, string indexName, string type, boolean useDelay);
	
	/**
	Moved from GenericDAO (non IDL)
	*/
	G_SearchResults search(G_EntityQuery pq);

	/**
	Moved from GenericDAO (non IDL)
	*/
	long count( G_EntityQuery q);
	
	/**
	Moved from GenericDAO (non IDL)
	*/
	G_SearchResults getAll( long offset,  long maxResults);
	
	
	/**
	 * Within this method, the callback cb will be executed, usually on each
	 * result the implementation finds. The implementation may choose to respect
	 * the G_EntityQuery q. If maxResults is set to 0, that is usually understood
	 * to mean that there is no upper bound to the number of results (aka All
	 * results)
	 * 
	 * @param offset
	 * @param maxResults
	 * @param cb
	 * @param q
	 * @return true if the callback succeeded, or did not find any errors.
	 */
	boolean performCallback(long offset, long maxResults, @java-class("graphene.model.idl.G_CallBack") string cb, G_EntityQuery q);
	
	/**
	 * This method is an expansion of the isReady system status. Individual
	 * implementations can declare what their readiness state is, and methods
	 * calling those implementations can decide whether the system is ready
	 * enough the be queried. This is good for multi layered DAOs, such as those
	 * backed by an InMemory portion. Depending on how much performance would be
	 * lost if the In Memory portion was not available, the implementation can
	 * adjust the strength of it's readiness accordingly.
	 * 
	 * @return a value between 0 (not ready) and 1 (fully operational)
	 */
	double getReadiness();

	/**
	 * 
	 * @return true if this DAO is ready to be queried.
	 */
	boolean isReady();

	/**
	 * Allows end user implementations to record the readiness of the service,
	 * for example if a procedure fails we may set the service to not ready, or
	 * a larger service can cause this service to be available or unavailable
	 * depending on it's settings.
	 * 
	 * @param b
	 */
	void setReady(boolean b);
	
	
}

