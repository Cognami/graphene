/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** * This is a placeholder for future modeling of uncertainty. It is not a
	 * required field in any service calls.
	 * */
@org.apache.avro.specific.AvroGenerated
public class G_Uncertainty extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Uncertainty\",\"namespace\":\"graphene.model.idl\",\"doc\":\"* This is a placeholder for future modeling of uncertainty. It is not a\\r\\n\\t * required field in any service calls.\\r\\n\\t *\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"* Placeholder for now. Express original source confidence as a single\\r\\n\\t\\t * number from 0 to 1.\",\"default\":1},{\"name\":\"type\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"* For describing the nature of the uncertainty (source data, algorithm,\\r\\n\\t\\t * unit, etc)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** * Placeholder for now. Express original source confidence as a single
		 * number from 0 to 1. */
   private double confidence;
  /** * For describing the nature of the uncertainty (source data, algorithm,
		 * unit, etc) */
   private java.lang.String type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Uncertainty() {}

  /**
   * All-args constructor.
   */
  public G_Uncertainty(java.lang.Double confidence, java.lang.String type) {
    this.confidence = confidence;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return confidence;
    case 1: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: confidence = (java.lang.Double)value$; break;
    case 1: type = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'confidence' field.
   * * Placeholder for now. Express original source confidence as a single
		 * number from 0 to 1.   */
  public java.lang.Double getConfidence() {
    return confidence;
  }

  /**
   * Sets the value of the 'confidence' field.
   * * Placeholder for now. Express original source confidence as a single
		 * number from 0 to 1.   * @param value the value to set.
   */
  public void setConfidence(java.lang.Double value) {
    this.confidence = value;
  }

  /**
   * Gets the value of the 'type' field.
   * * For describing the nature of the uncertainty (source data, algorithm,
		 * unit, etc)   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * * For describing the nature of the uncertainty (source data, algorithm,
		 * unit, etc)   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /** Creates a new G_Uncertainty RecordBuilder */
  public static graphene.model.idl.G_Uncertainty.Builder newBuilder() {
    return new graphene.model.idl.G_Uncertainty.Builder();
  }
  
  /** Creates a new G_Uncertainty RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Uncertainty.Builder newBuilder(graphene.model.idl.G_Uncertainty.Builder other) {
    return new graphene.model.idl.G_Uncertainty.Builder(other);
  }
  
  /** Creates a new G_Uncertainty RecordBuilder by copying an existing G_Uncertainty instance */
  public static graphene.model.idl.G_Uncertainty.Builder newBuilder(graphene.model.idl.G_Uncertainty other) {
    return new graphene.model.idl.G_Uncertainty.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Uncertainty instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Uncertainty>
    implements org.apache.avro.data.RecordBuilder<G_Uncertainty> {

    private double confidence;
    private java.lang.String type;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Uncertainty.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Uncertainty.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.confidence)) {
        this.confidence = data().deepCopy(fields()[0].schema(), other.confidence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Uncertainty instance */
    private Builder(graphene.model.idl.G_Uncertainty other) {
            super(graphene.model.idl.G_Uncertainty.SCHEMA$);
      if (isValidValue(fields()[0], other.confidence)) {
        this.confidence = data().deepCopy(fields()[0].schema(), other.confidence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'confidence' field */
    public java.lang.Double getConfidence() {
      return confidence;
    }
    
    /** Sets the value of the 'confidence' field */
    public graphene.model.idl.G_Uncertainty.Builder setConfidence(double value) {
      validate(fields()[0], value);
      this.confidence = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'confidence' field has been set */
    public boolean hasConfidence() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'confidence' field */
    public graphene.model.idl.G_Uncertainty.Builder clearConfidence() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public graphene.model.idl.G_Uncertainty.Builder setType(java.lang.String value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public graphene.model.idl.G_Uncertainty.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public G_Uncertainty build() {
      try {
        G_Uncertainty record = new G_Uncertainty();
        record.confidence = fieldSetFlags()[0] ? this.confidence : (java.lang.Double) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
